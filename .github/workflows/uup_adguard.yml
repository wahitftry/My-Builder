name: UUP Adguard

on:
  push:
    # branches:
    #   - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@latest
    - name: Run uup_download_windows.cmd
      run: |
        move * C:\
        cd C:\buildd\
        .\*.cmd
    - name: Upload ISO artifact
      uses: actions/upload-artifact@latest
      with:
        name: windows_11_adguard.iso
        path: C:\buildd\*.iso
    - name: Get previous release number
      uses: actions/github-script@latest
      id: get_previous_release
      with:
        github-token: ${{ secrets.MY_TOKEN }}
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 1
          });
          return {
            previous_release_number: releases.length > 0 ? releases[0].tag_name.replace('v', '') : '0'
          };
    - name: Delete previous release and tags
      uses: marvinpinto/action-automatic-releases@latest
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
      with:
        args: |
          --delete-previous-release
          --delete-previous-release-assets
          --delete-previous-release-tags
    - name: Release artifact
      uses: softprops/action-gh-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
      with:
        files: C:\buildd\*.iso
        tag_name: v$((steps.get_previous_release.outputs.previous_release_number + 1))
        name: Release v$((steps.get_previous_release.outputs.previous_release_number + 1))
        body: |
          This is release v$((steps.get_previous_release.outputs.previous_release_number + 1)) of UUP Adguard.
        draft: false
        prerelease: false
      if: github.ref == 'refs/heads/main'